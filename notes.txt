FUNCTIONS

- En JavaScript las funciones son la única cosa que crea un nuevo SCOPE
  - Ni siquiera {} crea un nuevo SCOPE
  ** power.js


- NUNCA DECLARAR UNA FUNCIÓN DENTRO DE UN IF O LOOP


- OPTIONAL ARGUMENTS
  - Si a una función se le pasasn muchos argumentos los no obligatorios son ignorados y si se le pasan muy pocos los faltantes son declarados 'undefined'
    - Permite crear parametros opcionales
    ** power_optional.js

- CLOSURE
  - Es una función que se encierra sobre una variable local congelando el código de su cuerpo en una variable (junto a las Local Variables) para ser llamadas posteriormente.
   - El parametro de la función CLOSURE se almacena como variable local también
   ** closure_multiplier.js

- RECURSION
  - Es una función que se llama a sí misma cambiando sus argumentos cada vez hasta alcanzar el resultado esperado
  - Correr un LOOP resulta más "barato" que llamar una función multiples veces
    - No preocupar por eficiencia hasta comprobar que el programa es muy lento
    - 1. Define los casos triviales (Donde no se invoca la función nuevamente --> Condición para terminar ciclo)
    - 2. Define casos generales (Donde se invola la función)
    - 3. Verificar cambios en la función le acercan a caso trivial
    ** power_recursion.js
    ** fibonacci_recursion.js
    ** isEven_recursion.js